PROGRAM PLC_PRG
VAR
	lcDizi: ARRAY[0..11] OF INT;
    kefeDizi: ARRAY[0..11] OF BOOL;
	sira:INT;
	hedefAgirlik:INT := 100;
	anlikGram:INT;
	lcler:INT := 12;
	kefeler:INT := 12;
	k: INT;
	//kombin:kombinasyonBul;
END_VAR
-------------------
PLC_PRG.kombinasyonBul(lcler := lcDizi, kefeler:=kefeDizi, sira:=sira, hedef:=hedefAgirlik, anlikAgirlik := anlikGram, k:=k);

-----------------------------------

METHOD PUBLIC kombinasyonBul : BOOL
VAR_INPUT
    lcler: ARRAY[0..11] OF INT;
    kefeler: ARRAY[0..11] OF BOOL;
    sira: INT;
    hedef: INT;
    anlikAgirlik: INT;
    k: INT;
END_VAR
VAR
	//kombin : kombinasyonBul;
    sonuc: BOOL;
END_VAR
--------------------
IF anlikAgirlik = hedef THEN 
	PLC_PRG.bitbas(items := lcler , bits := kefeler);
	RETURN;
END_IF

IF k >= sira OR anlikAgirlik > hedef THEN
	sonuc := 0;
	RETURN;
END_IF

kefeler[sira] := 1;
PLC_PRG.kombinasyonBul(lcler := lcler, kefeler:=kefeler, sira:=sira, hedef:=hedef, anlikAgirlik := anlikAgirlik + lcler[k], k:= k+1);

kefeler[sira] := 0;

WHILE (k < sira - 1) AND (kefeler[k] = kefeler[k+1]) DO
	k := k+1;
END_WHILE
PLC_PRG.kombinasyonBul(lcler := lcler, kefeler:=kefeler, sira:=sira, hedef:=hedef, anlikAgirlik := anlikAgirlik, k:= k+1);

-------------------------
METHOD PUBLIC bitbas : BOOL
VAR_INPUT
	items: ARRAY[0..11] OF INT := [0,0,0,0,0,0,0,0,0,0,0,0];
	bits: ARRAY[0..11] OF BOOL := [0,0,0,0,0,0,0,0,0,0,0,0];
END_VAR
VAR
sayi: INT := 12;
sira: INT;	

END_VAR

VAR_OUTPUT
	kefe: ARRAY[0..11] OF BOOL;
END_VAR

---------------
FOR sira:=0 TO 11  DO
	//sirayla bits adli diziyi yoklayacak. bits dizisi elemanlari, uygun kombinasyon bulununca 1 olacak
	IF bits[sira] THEN
		kefe[sira] := bits[sira];
	END_IF;
END_FOR
-------------------------
